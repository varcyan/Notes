throw语句
function fact(x){
    if(x < 0) throw new Error("x不能为负数");
}

try{}
catch(e){}
finally{}

6.对象
//创建对象
{}
new Object()
Object.create() //第一个参数是這个对象的原型，第二个参数用于对对象的进一步描述
inherit() //继承对象的属性

//删除属性
delete o.x	//只能删除自有属性，不能删除继承属性，也不能删除var声明的变量以及全局变量和函数

//检测属性
"x" in o;	//对象的自有属性或继承属性中包含這个属性则返回true
o.hasOwnProperty("x");	//检测给定的名字是否是对象的自有属性
o.propertyIsEnumerable("x");	//只有检测到是自有属性且這个属性的可枚举性为true时它才返回true
o.x !== undefined;	//属性存在 但当值为undefined时无法用這个方法

//枚举属性
for(p in o){if(!o.hasOwnProperty(p)) continue;}	//跳过继承属性
Object.keys()	//返回一个数组，由对象中可枚举的自有属性的名称组成
Object.getOwnPropertyNames()	//返回对象的所有自有属性的名称，而不仅仅是可枚举的属性

//getter和setter
var a = {
	name: "abc",
	get r(){/*函数体*/}，
	set r(){/*函数体*/}
}

//属性特性的查询和设置操作
Object.getOwnPropertyDescriptor()

//设置属性的特性
Object.defineProperty()
//同时创建多个属性
Object.defineProperties()

//查询某个对象的原型
Object.getPrototypeOf()
o.constructor.prototype
//检测一个对象是否是另一个对象的原型
isPrototypeOf()

//获得对象的类
function classof(){
    if(o===null) return "Null";
    if(o===undefined) return "Undefined";
    return Object.prototype.toString.call(o).slice(8,-1);
}

//可扩展性
//判断该对象是否是可扩展的
Object.esExtensible()

//将对象转换为不可扩展的
Object.preventExtensions()	//注意：一旦将对象转换为不可扩展的，就无法再将其转换回可扩展的了。
Object.seal()	//除了能够将对象设置为不可扩展的，还可以将对象的所有自有属性都设置成不可配置的。
Object.isSealed() //检测对象是否封闭
Object.freezi()	//除了将对象设置为不可扩展和不可配置之外，还可以将它的自由的所有数据属性设置为只读。如果对象存取器有setter方法，存取器属性不受影响）
Object.isFrozen()	//检测对象是否冻结
//创建一个封闭对象，包括一个冻结的原型和一个不可枚举的属性
var o = Object.seal(Object.creat(Object.freeze({x:1},
                                               {y:{value:2, writable:true}})))
